/*
	CodeQuest Frontend
	Written by Jonathan Verbeek - 2023
*/

import { Logger } from "./Logging";
import { Service } from "./Service";
import Interpreter from "js-interpreter";
import { VisualProgrammingService } from "./VisualProgrammingService";
import Blockly from "blockly";

// A "binding" is used to define a method that lives both in Blockly and JS world
interface CodeBinding {
    // Name of the binding
    name : string;

    // Blockly callback to generate the blockly block presented to the user in the visual programming mode
    blocklyGenerator : (block : Blockly.Block) => void;

    // Callback to tell Blockly how to generate the text code version of the block
    codeGenerator : (block : Blockly.Block, generator : Blockly.CodeGenerator) => string;

    // Native JavaScript function that's executed if this binding is called
    nativeFn : Function; 
}

// A list of default bindings always enabled
const DEFAULT_BINDINGS : Map<string, CodeBinding> = new Map<string, CodeBinding>([
    ["print", require("@/bindings/print").default]
]);

// This service is responsible for executing and evaluating code, either generated by the VPL
// or typed into the text code editor
class CodeEvalService extends Service {
    // Load a program
    public loadProgram(program : string) {
        if (program.length <= 0)
            return;

        this._program = program;

        // Create a new interpreter
        this._interpreter = new Interpreter(this._program, this.interpreterInitFunc.bind(this));
    }

    // Run the loaded program
    public run() {
        if (this._interpreter == null)
            return;

        // Run the interpreter
        var timeStarted = Date.now();
        this._interpreter.run();
        var timeElapsed = (Date.now() - timeStarted);
        Logger.info(`Interpreter ran user code in ${(timeElapsed / 1000).toFixed(3)} seconds. Result: ${this._interpreter.value}`);
    }

    // This function is called when initializing the interpreter to inject functionality
    // More here: https://neil.fraser.name/software/JS-Interpreter/docs.html
    private interpreterInitFunc(interpreter : Interpreter, globalObject : Object) { 
        // Go through each binding
        this._bindings.forEach((binding : CodeBinding, id : string) => {
            // Register with interpreter
            interpreter.setProperty(globalObject, id, interpreter.createNativeFunction(binding.nativeFn));
        });
    }

    // Registers default bindings
    public registerDefaultBindings() {
        DEFAULT_BINDINGS.forEach((v, k) => {
            this.registerBinding(k, v);
        });
    }

    // Registers a new binding
    public registerBinding(id : string, binding : CodeBinding) {
        if (this._bindings.has(id))
            return;

        // Add to binding store
        this._bindings.set(id, binding);

        // Register with Blockly
        Service.get(VisualProgrammingService).registerBinding(id, binding);

        Logger.info(`Registered binding ${id}`);
    }

    private _program : string = "";
    private _interpreter : Interpreter | undefined = undefined;
    private _bindings : Map<string, CodeBinding> = new Map<string, CodeBinding>();
}

export { CodeEvalService };    
export type { CodeBinding };
